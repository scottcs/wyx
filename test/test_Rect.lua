local Rect = require 'pud.kit.Rect'

context('Rect', function()
	context('When instantiated with no arguments', function()
		local r = Rect()
		test('should exist', function()
			assert_not_nil(r)
			assert_true(r:is_a(Rect))
		end)
		test('should have correct default x and y position', function()
			assert_equal(r:getX(), 0)
			assert_equal(r:getY(), 0)
		end)
		test('should have correct default width and height', function()
			assert_equal(r:getWidth(), 0)
			assert_equal(r:getHeight(), 0)
		end)
		test('should have correct default bounding box', function()
			local x1, y1, x2, y2 = r:getBBox()
			assert_equal(x1, 0)
			assert_equal(y1, 0)
			assert_equal(x2, 0)
			assert_equal(y2, 0)
		end)
		test('should have correct default center coordinates', function()
			local cx, cy = r:getCenter()
			assert_equal(cx, 0)
			assert_equal(cy, 0)
		end)
		test('should have correct default rounded center coordinates', function()
			local cx, cy = r:getCenter('round')
			assert_equal(cx, 0)
			assert_equal(cy, 0)
		end)
		test('should have correct default __tostring value', function()
			assert_equal(tostring(r), '(0,0) 0x0')
		end)
		test('should contain only point (0,0)', function()
			assert_true(r:containsPoint(0,0))
			assert_false(r:containsPoint(1,0))
			assert_false(r:containsPoint(0,1))
			assert_false(r:containsPoint(-1,0))
			assert_false(r:containsPoint(0,-1))
			assert_false(r:containsPoint(-1,-1))
			assert_false(r:containsPoint(1,1))
			assert_false(r:containsPoint(0.000001,-0.000001))
		end)
	end)

	context('When instantiated with arguments', function()
		local r = Rect(3, 15, 21, 50)
		test('should exist', function()
			assert_not_nil(r)
			assert_true(r:is_a(Rect))
		end)
		test('should have correct x and y position', function()
			assert_equal(r:getX(), 3)
			assert_equal(r:getY(), 15)
		end)
		test('should have correct width and height', function()
			assert_equal(r:getWidth(), 21)
			assert_equal(r:getHeight(), 50)
		end)
		test('should have correct bounding box', function()
			local x1, y1, x2, y2 = r:getBBox()
			assert_equal(x1, 3)
			assert_equal(y1, 15)
			assert_equal(x2, 3+21)
			assert_equal(y2, 15+50)
		end)
		test('should have correct center coordinates', function()
			local cx, cy = r:getCenter()
			assert_equal(cx, 3+21/2)
			assert_equal(cy, 15+50/2)
		end)
		test('should have correct rounded center coordinates', function()
			local cx, cy = r:getCenter('round')
			assert_equal(cx, 3+math.floor(21/2 + 0.5))
			assert_equal(cy, 15+math.floor(50/2 + 0.5))
		end)
		test('should have correct __tostring value', function()
			assert_equal(tostring(r), '(3,15) 21x50')
		end)
		test('should contain the correct points', function()
			assert_true(r:containsPoint(3,15))
			assert_true(r:containsPoint(24,65))
			assert_true(r:containsPoint(9,28))
			assert_true(r:containsPoint(3,28))
			assert_true(r:containsPoint(9,65))
			assert_false(r:containsPoint(0,0))
			assert_false(r:containsPoint(-1,60))
			assert_false(r:containsPoint(2,15))
			assert_false(r:containsPoint(3,14))
			assert_false(r:containsPoint(2,14))
			assert_false(r:containsPoint(25,65))
			assert_false(r:containsPoint(24,66))
			assert_false(r:containsPoint(25,66))
			assert_false(r:containsPoint(2592,6651))
		end)
	end)

	context('When setting position and size values', function()
		local r = Rect()
		r:setPosition(3, 15)
		r:setSize(21, 50)

		test('should have correct x and y position', function()
			assert_equal(r:getX(), 3)
			assert_equal(r:getY(), 15)
		end)
		test('should have correct width and height', function()
			assert_equal(r:getWidth(), 21)
			assert_equal(r:getHeight(), 50)
		end)
		test('should have correct bounding box', function()
			local x1, y1, x2, y2 = r:getBBox()
			assert_equal(x1, 3)
			assert_equal(y1, 15)
			assert_equal(x2, 3+21)
			assert_equal(y2, 15+50)
		end)
		test('should have correct center coordinates', function()
			local cx, cy = r:getCenter()
			assert_equal(cx, 3+21/2)
			assert_equal(cy, 15+50/2)
		end)
		test('should have correct rounded center coordinates', function()
			local cx, cy = r:getCenter('round')
			assert_equal(cx, 3+math.floor(21/2 + 0.5))
			assert_equal(cy, 15+math.floor(50/2 + 0.5))
		end)
		test('should have correct __tostring value', function()
			assert_equal(tostring(r), '(3,15) 21x50')
		end)
		test('should contain the correct points', function()
			assert_true(r:containsPoint(3,15))
			assert_true(r:containsPoint(24,65))
			assert_true(r:containsPoint(9,28))
			assert_true(r:containsPoint(3,28))
			assert_true(r:containsPoint(9,65))
			assert_false(r:containsPoint(0,0))
			assert_false(r:containsPoint(-1,60))
			assert_false(r:containsPoint(2,15))
			assert_false(r:containsPoint(3,14))
			assert_false(r:containsPoint(2,14))
			assert_false(r:containsPoint(25,65))
			assert_false(r:containsPoint(24,66))
			assert_false(r:containsPoint(25,66))
			assert_false(r:containsPoint(2592,6651))
		end)
	end)

	context('When setting center position', function()
		context('without rounding', function()
			local r = Rect()
			r:setSize(21, 50)
			r:setCenter(13, 40)

			test('should have correct size', function()
				assert_equal(r:getWidth(), 21)
				assert_equal(r:getHeight(), 50)
			end)
			test('should have correct x and y position', function()
				assert_equal(r:getX(), 2.5)
				assert_equal(r:getY(), 15)
			end)
			test('should have correct bounding box', function()
				local x1, y1, x2, y2 = r:getBBox()
				local w, h = r:getSize()
				assert_equal(x1, 2.5)
				assert_equal(y1, 15)
				assert_equal(x2, 2.5+21)
				assert_equal(y2, 15+50)
				assert_equal(x2-x1, w)
				assert_equal(y2-y1, h)
			end)
			test('should have correct center coordinates', function()
				local cx, cy = r:getCenter()
				assert_equal(cx, 2.5+21/2)
				assert_equal(cy, 15+50/2)
			end)
			test('should have correct rounded center coordinates', function()
				local cx, cy = r:getCenter('round')
				assert_equal(cx, 2.5+math.floor(21/2 + 0.5))
				assert_equal(cy, 15+math.floor(50/2 + 0.5))
			end)
			test('should contain the correct points', function()
				assert_true(r:containsPoint(2.5,15))
				assert_true(r:containsPoint(23.5,65))
				assert_true(r:containsPoint(9,28))
				assert_true(r:containsPoint(2.5,28))
				assert_true(r:containsPoint(9,65))
				assert_false(r:containsPoint(0,0))
				assert_false(r:containsPoint(-1,60))
				assert_false(r:containsPoint(2,15))
				assert_false(r:containsPoint(2.5,14))
				assert_false(r:containsPoint(2,14))
				assert_false(r:containsPoint(24,65))
				assert_false(r:containsPoint(23.5,66))
				assert_false(r:containsPoint(24,66))
				assert_false(r:containsPoint(2592,6651))
			end)
		end)

		context('with rounding', function()
			local r = Rect()
			r:setSize(21, 50)
			r:setCenter(13, 40, 'round')

			test('should have correct size', function()
				assert_equal(r:getWidth(), 21)
				assert_equal(r:getHeight(), 50)
			end)
			test('should have correct x and y position', function()
				assert_equal(r:getX(), 2)
				assert_equal(r:getY(), 15)
			end)
			test('should have correct bounding box', function()
				local x1, y1, x2, y2 = r:getBBox()
				local w, h = r:getSize()
				assert_equal(x1, 2)
				assert_equal(y1, 15)
				assert_equal(x2, 2+21)
				assert_equal(y2, 15+50)
				assert_equal(x2-x1, w)
				assert_equal(y2-y1, h)
			end)
			test('should have correct center coordinates', function()
				local cx, cy = r:getCenter()
				assert_equal(cx, 2+21/2)
				assert_equal(cy, 15+50/2)
			end)
			test('should have correct rounded center coordinates', function()
				local cx, cy = r:getCenter('round')
				assert_equal(cx, 2+math.floor(21/2 + 0.5))
				assert_equal(cy, 15+math.floor(50/2 + 0.5))
			end)
			test('should contain the correct points', function()
				assert_true(r:containsPoint(2,15))
				assert_true(r:containsPoint(23,65))
				assert_true(r:containsPoint(9,28))
				assert_true(r:containsPoint(2,28))
				assert_true(r:containsPoint(9,65))
				assert_false(r:containsPoint(0,0))
				assert_false(r:containsPoint(-1,60))
				assert_false(r:containsPoint(1,15))
				assert_false(r:containsPoint(2,14))
				assert_false(r:containsPoint(1,14))
				assert_false(r:containsPoint(24,65))
				assert_false(r:containsPoint(23,66))
				assert_false(r:containsPoint(24,66))
				assert_false(r:containsPoint(2592,6651))
			end)
		end)
	end)
end)
