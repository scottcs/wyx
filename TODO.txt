Items:
  d make some test item files
  o randomly place items in the level
  o Entity Inventory [this could also be used for bags? Item with an inventory?]
  o PickupCommand
  o DropCommand
  o EquipCommand

Console:
  o log console to file (with an option)
  o maybe different levels of messages [only log certain lines?]
  o allow input and create some awesome commands

Level:
  o change Level representation of enemy to be by position in a table for faster lookup
  o support lua in properties when read from file
  o   or at least formulas... like 1d20 or whatever [would still need access to properties, too, like 2d10 * Level... something]

Components:
  -   InfoPanelComponent - just a guess here... mouseover info panel thingy
  - UISystem - handles User Interface

Other:
  - fix tests
  o fix play state init,enter,leave so that it can leave [to a menu state, for example] without destroying anything, and come back. Or it can leave [to shutdown or main menu state] and kill everything.

For v0.1.0:
  o items
  o save/load
  o interface

Beyond v0.1.0:
  o dim area on screen should represent the hero's memory... entities and map objects should be drawn where they were last seen and in the state in which they were last seen.
  o make stairs work [generate new map]
  - wizard mode
  - make hero movement smoother [tweened... possibly only move camera when near edges?]
  x support sprite batches if framebuffers are unsupported
  o Level templates
  o   Be able to specify type of level construction, maps to use, enemies to use (by elevel, family, kind, etc), items to use. For example: mausoleum maps with skeletons and bone weapons, monastary maps with monks (any family) and magic armor, etc.

  Map:
  - map as quad-tree [or something?]
  ? maptypes as composites?
  - poisson disk sampling for decoration/item/monster placement [map gen too?]
  o map tiles like doors and stairs should be drawn above actual floor instead of incorporating floor into their tile [or should be objects rather than MapTypes]
  o   they should be collidable and send an event on collision [e.g. door collision asks entity if it has CanOpenDoors property, if so, sends DoorOpenEvent. trap collision triggers one of various TrapEvents.]
  ? How to handle map deformation? Would like ability to mine/dig/etc.
  o Create another View that can show simple representation of map nodes for Minimap.
  o and another View that can show some representation of nodes on a level beneath the current one [for pits, chasms, digging down, etc].
  o TileMapNodeView should listen for messages from its MapNode to determine if the node's type changed (for update() and _resetKey())
  x don't animate or update dim tiles

NOTES:

