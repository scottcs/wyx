Implement Components:
  - fix tests
	d add registry for entities
  d need a way to preload enemies and get by property (like "get random enemy with between 10 and 20 MaxHealth") [sort of did this... calculate elevel instead]
	d console for info/debugging
	o   log console to file (with an option)
	o   maybe different levels of messages [only log certain lines?]
	o   allow input and create some awesome commands
	o change Level representation of enemy to be by position in a table for faster lookup
  o support lua in properties when read from file
  -   InfoPanelComponent - just a guess here... mouseover info panel thingy
  d     AIInputComponent - AI routines, sends same messages as input component
	d       Simple random AI for testing
	+ fix enemy drawing
	+    flickering
	+    lighting not updated until next frame
	+    if out of player sight, don't draw
	+ AttackCommand
  x InputSystem - ticks InputComponents
  x   - must also allow components to steal input [example: interface steals mouse click so that any components underneath do nothing] [I THINK]
  x AISystem - ticks AIComponents
  - UISystem - handles User Interface
  x CombatSystem - determines outcome of combat using CombatComponents
	o fix play state init,enter,leave so that it can leave [to a menu state, for example] without destroying anything, and come back. Or it can leave [to shutdown or main menu state] and kill everything.

For v0.1.0:
  o monsters
  o combat
  o items
  o save/load
  o interface

Beyond v0.1.0:
  o make stairs work [generate new map]
  - wizard mode
  - make hero movement smoother [tweened... possibly only move camera when near edges?]
  x support sprite batches if framebuffers are unsupported
	o Level templates
	o   Be able to specify type of level construction, maps to use, enemies to use (by elevel, family, kind, etc), items to use. For example: mausoleum maps with skeletons and bone weapons, monastary maps with monks (any family) and magic armor, etc.

	Map:
  - map as quad-tree [or something?]
  ? maptypes as composites?
  - poisson disk sampling for decoration/item/monster placement [map gen too?]
	o map tiles like doors and stairs should be drawn above actual floor instead of incorporating floor into their tile [or should be objects rather than MapTypes]
	o   they should be collidable and send an event on collision [e.g. door collision asks entity if it has CanOpenDoors property, if so, sends DoorOpenEvent. trap collision triggers one of various TrapEvents.]
	? How to handle map deformation? Would like ability to mine/dig/etc.
	o Create another View that can show simple representation of map nodes for Minimap.
	o and another View that can show some representation of nodes on a level beneath the current one [for pits, chasms, digging down, etc].
	o TileMapNodeView should listen for messages from its MapNode to determine if the node's type changed (for update() and _resetKey())
  x don't animate or update dim tiles

NOTES:

