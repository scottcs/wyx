local Map = require 'pud.level.Map'
local MapNode = require 'pud.level.MapNode'
local MapType = require 'pud.level.MapType'
local Rect = require 'pud.kit.Rect'

context('Map', function()
	context('When instantiating with no arguments', function()
		local map = Map()
		test('should exist', function()
			assert_not_nil(map)
			assert_true(map:is_a(Map))
		end)
		test('should inherit Rect', function()
			assert_true(map:is_a(Rect))
		end)
		test('should have correct coordinates', function()
			assert_equal(map:getX(), 0)
			assert_equal(map:getY(), 0)
		end)
		test('should have correct size', function()
			assert_equal(map:getWidth(), 0)
			assert_equal(map:getHeight(), 0)
		end)
		test('should not have any locations defined', function()
			assert_error(function() map:getLocation(0,0) end)
			assert_error(function() map:getLocation(1,1) end)
			assert_error(function() map:getLocation(-1,-1) end)
			assert_error(function() map:getLocation(1,0) end)
			assert_error(function() map:getLocation(0,1) end)
			assert_error(function() map:getLocation(10,11) end)
			assert_error(function() map:getLocation(-3,3) end)
		end)
		test('should have an empty __tostring', function()
			assert_equal(tostring(map), '')
		end)
	end)

	context('When instantiating with arguments', function()
		local map = Map(3, 15, 21, 50)
		test('should exist', function()
			assert_not_nil(map)
			assert_true(map:is_a(Map))
		end)
		test('should inherit Rect', function()
			assert_true(map:is_a(Rect))
		end)
		test('should have correct coordinates', function()
			assert_equal(map:getX(), 3)
			assert_equal(map:getY(), 15)
		end)
		test('should have correct size', function()
			assert_equal(map:getWidth(), 21)
			assert_equal(map:getHeight(), 50)
		end)
		test('should have empty locations within bounds', function()
			assert_equal(map:getLocation(1,1):getMapType(), MapType.empty)
			assert_equal(map:getLocation(10,11):getMapType(), MapType.empty)
			assert_equal(map:getLocation(map:getSize()):getMapType(), MapType.empty)
		end)
		test('should have no locations defined out of bounds', function()
			assert_error(function() map:getLocation(0,0) end)
			assert_error(function() map:getLocation(-1,-1) end)
			assert_error(function() map:getLocation(1,0) end)
			assert_error(function() map:getLocation(0,1) end)
			assert_error(function() map:getLocation(-3,3) end)
		end)
		test('should have a non-empty __tostring', function()
			assert_not_nil(tostring(map))
			assert_not_equal(tostring(map), '')
		end)
	end)

	context('When setting values', function()
		context('should have correct values', function()
			local map = Map(0, 0, 20, 20)
			local node = MapNode(MapType.wall)
			node:setLit(true)

			test('for setLocation', function()
				map:setLocation(3, 8, node)
				local testNode = map:getLocation(3, 8)
				assert_not_nil(testNode)
				assert_equal(testNode:getMapType(), MapType.wall)
			end)
			test('for setNodeMapType', function()
				map:setNodeMapType(map:getLocation(9, 19), MapType.floor)
				assert_equal(map:getLocation(9, 19):getMapType(), MapType.floor)
			end)
		end)
	end)
end)
