local Map = require 'pud.map.Map'
local MapNode = require 'pud.map.MapNode'
local MapType = require 'pud.map.MapType'
local Rect = require 'pud.kit.Rect'

context('Map', function()
	context('When instantiating with no arguments', function()
		local map = Map()
		test('should exist', function()
			assert_not_nil(map)
			assert_true(map:is_a(Map))
		end)
		test('should inherit Rect', function()
			assert_true(map:is_a(Rect))
		end)
		test('should have correct coordinates', function()
			assert_equal(map:getX(), 0)
			assert_equal(map:getY(), 0)
		end)
		test('should have correct size', function()
			assert_equal(map:getWidth(), 0)
			assert_equal(map:getHeight(), 0)
		end)
		test('should not have any locations defined', function()
			assert_error(function() map:getLocation(0,0) end)
			assert_error(function() map:getLocation(1,1) end)
			assert_error(function() map:getLocation(-1,-1) end)
			assert_error(function() map:getLocation(1,0) end)
			assert_error(function() map:getLocation(0,1) end)
			assert_error(function() map:getLocation(10,11) end)
			assert_error(function() map:getLocation(-3,3) end)
		end)
		test('should have an empty __tostring', function()
			assert_equal(tostring(map), '')
		end)
	end)

	context('When instantiating with arguments', function()
		local map = Map(3, 15, 21, 50)
		test('should exist', function()
			assert_not_nil(map)
			assert_true(map:is_a(Map))
		end)
		test('should inherit Rect', function()
			assert_true(map:is_a(Rect))
		end)
		test('should have correct coordinates', function()
			assert_equal(map:getX(), 3)
			assert_equal(map:getY(), 15)
		end)
		test('should have correct size', function()
			assert_equal(map:getWidth(), 21)
			assert_equal(map:getHeight(), 50)
		end)
		test('should have empty locations within bounds', function()
			assert_true(map:getLocation(1,1):getMapType():isType('empty'))
			assert_true(map:getLocation(10,11):getMapType():isType('empty'))
			assert_true(map:getLocation(map:getSize()):getMapType():isType('empty'))
		end)
		test('should have no locations defined out of bounds', function()
			assert_error(function() map:getLocation(0,0) end)
			assert_error(function() map:getLocation(-1,-1) end)
			assert_error(function() map:getLocation(1,0) end)
			assert_error(function() map:getLocation(0,1) end)
			assert_error(function() map:getLocation(-3,3) end)
		end)
		test('should have a correct __tostring', function()
			local map = Map(0, 0, 10, 10)
			local mapstr = ''
			for j=1,10 do
				for i=1,10 do
					local node = map:getLocation(i, j)
					local t = 'floor'
					local c = '.'
					if i%2 == 0 then
						t = 'wall'
						c = '#'
					elseif j%2 == 0 then
						t = 'doorClosed'
						c = '+'
					end

					mapstr = mapstr .. c
					map:setLocation(i, j, map:setNodeMapType(node, t))
				end
				if j < 10 then mapstr = mapstr .. '\n' end
			end

			assert_not_nil(tostring(map))
			assert_equal(tostring(map), mapstr)
		end)
	end)

	context('When setting values', function()
		local map = Map(0, 0, 20, 20)
		local node = MapNode('wall')
		node:setLit(true)

		context('for setLocation', function()
			test('should have correct values', function()
				map:setLocation(3, 8, node)
				local testNode = map:getLocation(3, 8)
				assert_not_nil(testNode)
				assert_true(testNode:getMapType():isType('wall'))
			end)
			test('should error on incorrect arguments', function()
				assert_error(function() map:setLocation() end)
				assert_error(function() map:setLocation(1) end)
				assert_error(function() map:setLocation(1, 1) end)
				assert_error(function() map:setLocation(0, 0, node) end)
				assert_error(function() map:setLocation('s', 's', 's') end)
				assert_error(function() map:setLocation(2, 2, {}) end)
			end)
		end)
		context('for setNodeMapType', function()
			test('should have correct values', function()
				map:setNodeMapType(map:getLocation(9, 19), 'floor')
				assert_true(map:getLocation(9, 19):getMapType():isType('floor'))
			end)
			test('should error on incorrect arguments', function()
				local node = MapNode()
				assert_error(function() map:setNodeMapType() end)
				assert_error(function() map:setNodeMapType(4) end)
				assert_error(function() map:setNodeMapType('floor') end)
				assert_error(function() map:setNodeMapType(node, 'zzzz') end)
			end)
			test('should return the given node', function()
				local node = MapNode('doorClosed')
				local node2 = map:setNodeMapType(node, 'floor')
				assert_true(node:getMapType():isType('floor'))
				assert_true(node2:getMapType():isType('floor'))
				assert_equal(node, node2)
			end)
		end)
	end)
end)
